target C {
  workers: 2,
  timeout: 510 weeks,
  scheduler: STATIC,
}
preamble {=
  typedef uint32_t IntArr3;  
=}
reactor Gyroscope {
  timer t(0 s, 10 ms)
  output out: IntArr3
  @wcet("1 ms")
  reaction(t) -> out {= =}
}
reactor Processing {
  input i1: IntArr3
  input i2: IntArr3
  input i3: IntArr3
  output o1: IntArr3
  output o2: IntArr3
  timer t(0 s, 15 ms)
  @wcet("1 ms")
  reaction(i1, i2, i3)  {= =}
  @wcet("3 ms")
  reaction(t) -> o1, o2 {= =}
}
reactor UserInput {
  output out: IntArr3;
  reaction(startup) -> out {= =}
}
reactor Controller {
  input position: IntArr3
  input velocity: IntArr3
  output out: IntArr3
  @wcet("4 ms")
  reaction(position, velocity) -> out {= =} 
}
reactor Motor {
  input in:IntArr3
  @wcet("1 ms")
  reaction(in) {= =}
}
main reactor {
  gyro1 = new Gyroscope()
  gyro2 = new Gyroscope()
  gyro3 = new Gyroscope()
  processing = new Processing()
  controller = new Controller()
  motor = new Motor()
  gyro1.out -> processing.i1
  gyro2.out -> processing.i2
  gyro3.out -> processing.i3
  processing.o1 -> controller.position
  processing.o2 -> controller.velocity
  controller.out -> motor.in
}
