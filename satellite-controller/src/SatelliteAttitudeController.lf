target C {
  scheduler: STATIC,
  build-type: Debug,
  platform: FlexPRET,
  files : ["synthetic_data.c", "synthetic_data.h", "satellite_attitude_controller.c", "satellite_attitude_controller.h"],
  cmake-include: "SatelliteAttitudeController.cmake",
  workers: 2,
}

preamble {=
  #include <string.h>
  #include <flexpret/flexpret.h>
  #include "satellite_attitude_controller.h"

  // Conveneince macros for calculating the current lag
  #define LAG() (rdtime() - ((uint32_t)lf_time_logical()))

  // Convenience macro for printing out the lag of a module. Uncomment to enable
  // #define PRINT_LAGS
  #ifdef PRINT_LAGS
  #define PRINT_LAG(module) lf_print("Lag in " #module " = %lu", LAG())
  #else
  #define PRINT_LAG(module) 
  #endif

  // Convenience macro to measure execution times of a module. Uncomment to enable
  // #define MEASURE_EXECUTION_TIMES
  #ifdef MEASURE_EXECUTION_TIMES
  #define EXEC_BEGIN() uint32_t __t1 = rdtime()
  #define EXEC_END() uint32_t __t2 = rdtime()
  #define EXEC_REPORT(module) lf_print("Execution time of " #module " = %lu", __t2 - __t1) 
  #else
  #define EXEC_BEGIN()
  #define EXEC_END()
  #define EXEC_REPORT(module)
  #endif
=}

reactor Controller(Kp_float: float = 0.3, Ki_float: float = 0.1, Kd_float: float = 0.0) {
    input current_angle: IntVec3
    input current_speed: IntVec3
    input desired_angle: IntVec3

    output control_signal: IntVec3

    state desired_angle: IntVec3
    state last_update: time = 0
    state last_error: IntVec3
    state error_accumulator: IntVec3

    state Kp_fixed_point: int = 0
    state Ki_fixed_point: int = 0
    state Kd_fixed_point: int = 0

    reaction(startup) {=
      controller_startup_reaction(self->Kp_float, self->Ki_float, self->Kd_float, &self->Kp_fixed_point, &self->Ki_fixed_point, &self->Kd_fixed_point);
      #ifndef NDEBUG
      lf_print("Controller gains: Kp=%i Ki=%i Kd=%i", self->Kp_fixed_point, self->Ki_fixed_point, self->Kd_fixed_point);
      #endif
    =}


    reaction(desired_angle) {=
      controller_user_input_reaction(&desired_angle->value, &self->desired_angle);
      #ifndef NDEBUG
      lf_print("Desired angle set to %i %i %i", self->desired_angle.x, self->desired_angle.y, self->desired_angle.z);
      #endif
    =}

    @wcet("700 usec")
    reaction(current_speed, current_angle) -> control_signal {=
        EXEC_BEGIN();
        controller_run_reaction(&current_angle->value, &current_speed->value, &self->desired_angle, &self->last_error, &self->error_accumulator, self->Kp_fixed_point, self->Ki_fixed_point, self->Kd_fixed_point, &control_signal->value);
        lf_set_present(control_signal);
        EXEC_END();
        EXEC_REPORT(Controller);
    =} 
}

reactor Motor(freq: float=1000.0, lfDeadline: time = 10 ms) {
    input in:IntVec3
    
    @wcet("100 usec")
    reaction(in) {=
      EXEC_BEGIN();
      #ifndef NDEBUG
      lf_print("Got motor control input %i %i %i", in->value.x, in->value.y, in->value.z);
      #endif

      motor_reaction(&in->value);

      PRINT_LAG(Motor);
      EXEC_END();
      EXEC_REPORT(Motor);
    =} deadline(lfDeadline) {=
        // lf_print_error_and_exit("deadline missd in Motor lag=" PRINTF_TIME, LAG());
        lf_print_error_and_exit("deadline missd in Motor");
    =}
}

reactor UserInput {
    output desired_angle: IntVec3;
    @wcet("25 usec")
    reaction(startup) -> desired_angle {=
        user_input_startup(&desired_angle->value);
        lf_set_present(desired_angle);
    =}
}

reactor Gyroscope(period: time =10ms) {
    timer t(10ms, period)
    output out: IntVec3
    state cnt: int = 0
    preamble{=
      #include "synthetic_data.h"
    =}

    @wcet("50 usec")
    reaction(t) -> out {=
        EXEC_BEGIN();
        PRINT_LAG(Gyro);      
        gyro_reaction(&out->value);
        lf_set_present(out);
        EXEC_END();
        EXEC_REPORT(Gyro);
    =}
}

reactor Accelerometer(period: time =10ms) {
    timer t(10ms, period)
    output out: IntVec3

    @wcet("50 usec")
    reaction(t) -> out {=
        EXEC_BEGIN();
        PRINT_LAG(ARS);
        acc_reaction(&out->value);
        lf_set_present(out);
        EXEC_END();
        EXEC_REPORT(ARS);
    =}
}

main reactor {
  controller = new Controller()
  userInput = new UserInput()
  gyro = new Gyroscope(period=1ms)
  accel = new Accelerometer(period=1ms)
  motor = new Motor(lfDeadline=600msec)

  gyro.out -> controller.current_angle
  accel.out -> controller.current_speed
  userInput.desired_angle -> controller.desired_angle
  controller.control_signal -> motor.in
}
