target C {
    scheduler: NP,
    build-type: Release,
    platform: FlexPRET,
    cmake-include: "SatelliteAttitudeController.cmake",  // logging: Debug,
    workers: 2,
    timeout: 1100001 usec
}

import Controller from "SatelliteAttitudeController.lf"
import UserInput from "SatelliteAttitudeController.lf"
import Gyroscope from "SatelliteAttitudeController.lf"
import Motor from "SatelliteAttitudeController.lf"

preamble {=
    #include "satellite_attitude_controller.h"
=}

reactor Sensor {
    output angle: IntVec3
    output angular_speed: IntVec3
    output dummyOut: bool
    state _state: SensorFusionState // Used for angle calculation
    gyroscope = new Gyroscope()
    reaction(gyroscope.out) -> angle {=
        compute_angle(&self->_state, &gyroscope.out->value, &angle->value);
    =}
    gyroscope.out -> angular_speed
}

reactor FlightComputer(width:int=3) {
    input desired_angle: IntVec3
    output control_signal: IntVec3
    output dummyOut: bool
    sensors = new[width] Sensor()
    voter = new SensorVoter(width=width)
    controller = new Controller()
    desired_angle -> controller.desired_angle
    sensors.angle -> voter.angle
    sensors.angular_speed -> voter.angular_speed
    sensors.dummyOut -> voter.dummyIn
    voter.current_angle -> controller.current_angle
    voter.current_angular_speed -> controller.current_angular_speed
    voter.dummyOut -> controller.dummyIn
    controller.control_signal -> control_signal
    controller.dummyOut -> dummyOut
}

reactor SensorVoter(width:int = 3) {
    input[width] angle: IntVec3
    input[width] angular_speed: IntVec3
    input[width] dummyIn: bool
    output current_angle: IntVec3
    output current_angular_speed: IntVec3
    output dummyOut: bool
    reaction(angle, angular_speed) -> current_angle, current_angular_speed {==}
    reaction(dummyIn) -> dummyOut {==}
}

reactor ComputerVoter(width:int = 3) {
    input[width] in: IntVec3
    input[width] dummyIn: bool
    output out: IntVec3
    output dummyOut: bool
    reaction(in) -> out {==}
    reaction(dummyIn) -> dummyOut {==}
}

reactor Actuator(width:int = 3) {
    input[width] in: IntVec3
    input[width] dummyIn: bool
    voter = new ComputerVoter()
    motor = new Motor()
    in -> voter.in
    dummyIn -> voter.dummyIn
    voter.out -> motor.in
    voter.dummyOut -> motor.dummyIn
}

main reactor {
    user_input = new UserInput()
    actuator = new Actuator()
    computer0 = new FlightComputer()
    computer1 = new FlightComputer()
    computer2 = new FlightComputer()

    user_input.desired_angle -> computer0.desired_angle
    user_input.desired_angle -> computer1.desired_angle
    user_input.desired_angle -> computer2.desired_angle
    computer0.control_signal, computer1.control_signal, computer2.control_signal -> actuator.in
    computer0.dummyOut, computer1.dummyOut, computer2.dummyOut -> actuator.dummyIn
}
