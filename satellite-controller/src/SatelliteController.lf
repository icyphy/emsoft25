target C {
  scheduler: {
    type: STATIC,
    mapper: EGS
  },
  build-type: Release,
  platform: FlexPRET,
  workers: 2,
}

reactor Controller(Kp_float: float = 0.3, Ki_float: float = 0.1, Kd_float: float = 0.0) {
    input angle: IntVec3
    input angular_speed: IntVec3
    input desired_angle: IntVec3
    output out: IntVec3

    @wcet("1 usec")
    reaction(desired_angle) {= =}
    @wcet("173 usec")
    reaction(angle, angular_speed) -> out {= =} 

    @wcet("1 msec")
    reaction(shutdown)  {= =}
}

reactor Motor(lfDeadline: time = 100 usec) {
    input in:IntVec3
    @wcet("2 usec")
    reaction(in) {= =} deadline(lfDeadline) {= =}
}

reactor UserInput {
    output out: IntVec3;
    @wcet("1 usec")
    reaction(startup) -> out {= =}
}

reactor SensorFusion {
    input i1: IntVec3
    input i2: IntVec3
    output o1: IntVec3
    output o2: IntVec3

    @wcet("62 usec")
    reaction(i1, i2) -> o1, o2 {= =}
}


reactor Gyroscope(period: time =1ms, lfDeadline: time = 1 usec) {
    timer t(10msec, period)
    output out: IntVec3

    @wcet("21 usec")
    reaction(t) -> out {= =}  deadline(lfDeadline) {= =}
}

main reactor {
  gyro1 = new Gyroscope(period=1ms, lfDeadline=20 usec)
  gyro2 = new Gyroscope(period=1ms, lfDeadline=20 usec)
  userInput = new UserInput()
  sensorFusion = new SensorFusion()
  controller = new Controller()
  motor = new Motor(lfDeadline=300 usec)
  gyro1.out, gyro2.out -> sensorFusion.i1, sensorFusion.i2
  sensorFusion.o1 -> controller.angle
  sensorFusion.o2 -> controller.angular_speed
  userInput.out -> controller.desired_angle
  controller.out -> motor.in
}
