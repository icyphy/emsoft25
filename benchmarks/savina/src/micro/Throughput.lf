/**
 * Micro-benchmark from the Savina benchmark suite, where it is called Fork Join.
 * See https://shamsimam.github.io/papers/2014-agere-savina.pdf.
 *
 * According to the Savina paper performance can be achieved by
 * batch processing messages in the worker actors.
 * This is not possible with reactors because scheduling and
 * advancing logical time occurs after each round of
 * message delivery.
 */


/* [[[cog
# This file is a code generator using the python module cog:
# See https://nedbatchelder.com/code/cog/
#
# All instructions for code  generation are in-lined in comments
# like this one. With that you can use this file as a normal source file
# but also to generate code.
#
# To change the generated code in-line within this file run:
# $ python -m cog -r this-file.lf
# To generate a new file from this file stripping the generator code in the process run:
# $ python -m cog -d -o output-file.lf this-file.lf
#
# Use the command line option -D to specify generator parameters, for example:
# $ python -m cog -r -D parameter=100 this-file.lf
#
# Generator parameters used in this file:
# -D numWorkers=60
# -D numMessagesPerReactor=10000
]]] */
// [[[end]]]

/* [[[cog
  # force existence, type and default values of generator parameters
  if 'numWorkers' in globals():
    numWorkers = int(numWorkers)
  else:
    globals()['numWorkers'] = 60

  # output the current value of the generator parameters used in the last generation run
  cog.outl(f'// Generated file with the following parameters:')
  cog.outl(f'// numWorkers = {numWorkers}')
  cog.outl(f'// numMessagesPerReactor={numMessagesPerReactor}')
]]] */
// Generated file with the following parameters:
// numWorkers = 60
// numMessagesPerReactor = 10000
// [[[end]]]

target C {
    /* [[[cog
      if (threading=="True"):
          cog.outl("single-threaded: false,")
          cog.outl(f"workers: {workers},")
          cog.outl(f"scheduler: {scheduler},")
      else:
          cog.outl("single-threaded: true,")
    ]]] */
    //single-threaded: true,
    /// [[[end]]]
    files: ["../include/benchmark_runner.h"],
    //compiler-flags: "-lm",
    scheduler: STATIC,
    fast: true,
    timeout: 120002 nsec, // The last 2 nsec is for the runner summary.
};

import BenchmarkRunner from "../BenchmarkRunner.lf";

preamble {=
    #include "benchmark_runner.h"
=}

reactor ThroughputReactor(totalMessages:size_t=10000) {

    preamble {=
        #include <math.h>

        void performComputation(double theta) {
            double sint = sin(theta);
            // volatile to defeat dead code elimination
            volatile double res = sint * sint;
        }
    =}

    input inMessage:bool;
    state count:int = 0;

    reaction(inMessage) {=
        performComputation(37.2);

        self->count++;
        if (self->count == self->totalMessages) {
            lf_print("Success: performed computation %d times", self->count);
            self->count = 0;
        }
    =}
}


/**
 *
 */
reactor ThroughputProducer(totalMessages:size_t=10000, numConsumer:size_t=60) {
    state sent_messages: size_t=0;
    input start:bool;
    output finished:bool;

    output outMessage_0:bool;
    output outMessage_1:bool;
    output outMessage_2:bool;

    // replaced by following two ports logical action send_next_msg;
    input send_next_msg_input: int;
    output send_next_msg_output: int;

    reaction(start, send_next_msg_input) -> send_next_msg_output, finished, outMessage_0, outMessage_1, outMessage_2 {=
        lf_set_present(outMessage_0);
        lf_set_present(outMessage_1);
        lf_set_present(outMessage_2);
        
        self->sent_messages++;
        if (self->sent_messages == self->totalMessages) {
            // reset state
            self->sent_messages = 0;
            lf_set_present(finished);
        } else {
            lf_set_present(send_next_msg_output);
        }
    =}
}


/* [[[cog
cog.outl(f'main reactor (numIterations:size_t={numIterations}, numMessagesPerReactor:size_t={numMessagesPerReactor}, numWorkers:size_t={numWorkers})')
]]] */
main reactor (numIterations:size_t=12, numMessagesPerReactor:size_t=10000, numWorkers:size_t=60)
// [[[end]]]
{
    runner = new BenchmarkRunner(num_iterations=numIterations);
    runner.doneOut -> runner.doneIn after 1 nsec;
    runner.nextIterationOut -> runner.nextIterationIn after 1 nsec;

    producer = new ThroughputProducer(totalMessages=numMessagesPerReactor, numConsumer=numWorkers);

    producer.send_next_msg_output -> producer.send_next_msg_input after 1 nsec;
   
    runner.start -> producer.start;

    producer.finished -> runner.finish;

    // Manually instantiate a bank
    worker_0 = new ThroughputReactor(totalMessages=numMessagesPerReactor);
    producer.outMessage_0 -> worker_0.inMessage
    worker_1 = new ThroughputReactor(totalMessages=numMessagesPerReactor);
    producer.outMessage_1 -> worker_1.inMessage
    worker_2 = new ThroughputReactor(totalMessages=numMessagesPerReactor);
    producer.outMessage_2 -> worker_2.inMessage
}
