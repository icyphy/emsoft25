/**
 * Copyright (C) 2020 TU Dresden and UC Berkeley
 *
 * This benchmark consists of a so-called 'Teller' and a number of Account reactors.
 * The Accounts keep an internal balance. The Teller generates a series of random
 * credit messages which it sends to the various accounts. Each credit message
 * specifies an amount and a destination account. The account that receives a credit
 * message from the teller will reduce its balance by the given amount and sends a
 * debit message of the same amount to the destination account. The destination
 * account will then increase its balance accordingly.
 *
 * Note that the original Akka implementation performs an explicit synchronisation, to
 * ensure that the debit message has been processed by the destination account before
 * replying to the teller that the credit message was processed. This synchronization
 * and reply mechanism is not required in LF, as all messages are processed logically
 * synchronous. The teller can be sure that any credit messages it sends will be
 * processed before moving to the next tag, and similarly each account can be sure that
 * any debit messages it sends will be processed by the receiving accounts before
 * receiving any new messages.
 *
 * The initial generation of all the credit messages is an interesting problem in LF.
 * In the Akka implementation, the teller actor will just send `numBankings` randomly
 * generated messages to the account actors, which then process one message after the
 * other. However, this is not easily doable in LF, as a port can only hold a single
 * value. In order to send multiple messages to the same account, the teller needs to
 * use an action and advance in logical time before sending the next message. This is
 * currently implemented such that the Teller creates an initial queue per account
 * which contains all credit messages that should be sent to this account. Then it
 * schedules it `next` action and the corresponding reaction will send the first
 * round of messages to the accounts. Then it schedules next again. This continues
 * until all messages are sent.
 *
 * A potential optimization to the problem described above, would be not to send
 * individual credit messages to the accounts, but instead a list of messages (for
 * instance a std::vector). This could be done in a single logical step and should
 * thus be much faster. However, this is likely an unfair advantage over the Akka
 * implementation, which also sends all messages individually.
 *
 * Major changes from original Cpp implementation:
 *     - implemented deque for c
 *     - parameter passing for reactor Account: cannot pass in initialBalance = DBL_MAX / (numAccounts * numTransactions)
 *   when initializing Account. Have to pass in numTransactions and calculate initialBalance in a startup reaction in
 *   numAccounts.
 */


 target C {
    /* [[[cog
      if (threading=="True"):
          cog.outl("single-threaded: false,")
          cog.outl(f"workers: {workers},")
          cog.outl(f"scheduler: {scheduler},")
      else:
          cog.outl("single-threaded: true,")
    ]]] */
    //single-threaded: true,
    /// [[[end]]]
    files: ["../include/PseudoRandom.h",
            "../include/benchmark_runner.h",
            "/lib/c/reactor-c/util/deque.h",
            "/lib/c/reactor-c/util/deque.c"],
    cmake-include: ["../include/deque.cmake"],
    //logging: warn,
    //fast: true
    scheduler: STATIC,
    timeout: 12000100 nsec
};

import BenchmarkRunner from "../BenchmarkRunner.lf";

preamble {=
    #include "benchmark_runner.h"
    #include "PseudoRandom.h"
    #include "deque.h"
    #include <float.h>
    extern long seed;
    typedef deque_t message_queue_t;
    typedef struct CreditMessage {
        size_t recipient;
        double amount;
    } credit_message_t;
=}


reactor Teller(numAccounts:size_t=1000, numBankings:size_t=50000) {

    preamble {=
        long seed = 123456;
    =}

    state message_queues : {=message_queue_t*=};
    state random_gen : {=PseudoRandom *=};
    input start: bool;
    output finished: bool;

    output credit_0: credit_message_t;
    output credit_1: credit_message_t;
    output credit_2: credit_message_t;
    //output[numAccounts] credit: credit_message_t;

    input nextIn: int;
    output nextOut: int;

    reaction(start) -> nextOut {=
        if (!self->message_queues) {
            self->message_queues = (message_queue_t *) calloc(self->numAccounts, sizeof(message_queue_t));
        }
        if (!self->random_gen) {
            self->random_gen = (PseudoRandom *) malloc(sizeof(PseudoRandom));
            initPseudoRandom(self->random_gen, seed);
        }
        //lf_print("Teller: Start a new iteration\n");


        for (int i = 0; i < self->numBankings; i++) {
            // src is lower than dest id to ensure there is never a deadlock
            // Note: this comment stems from the original Akka implementation and
            // is actually not needed in LF, since cycle free programs cannot deadlock
            size_t src_account = nextIntEMax(self->random_gen, (self->numAccounts / 10) * 8);
            size_t loop_id = nextIntEMax(self->random_gen, self->numAccounts - src_account);
            if(loop_id == 0) {
                loop_id += 1;
            }
            size_t dest_account = src_account + loop_id;
            double amount = nextDouble(self->random_gen) * 1000;

            credit_message_t *new_msg = malloc(sizeof(credit_message_t));
            new_msg->recipient = dest_account;
            new_msg->amount = amount;
            deque_push_back(&(self->message_queues[src_account]), new_msg);
        }

        // start execution
        //lf_set(next, 0);
        int out = 0;
        lf_set(nextOut, out);
    =}

    reaction(nextIn) -> nextOut, credit_0, credit_1, credit_2, finished {=
        //lf_print("Teller: Sending a new round of credit messages\n");
        int work_found = 0;
        size_t i;
        message_queue_t *queue;
        
        queue = &(self->message_queues[0]);
        if (!deque_is_empty(queue)) {
            work_found = 1;
            credit_message_t *message = (credit_message_t *) deque_peek_front(queue);
            lf_set(credit_0, *message);
            free(deque_pop_front(queue)); // free allocated memory
        }

        queue = &(self->message_queues[1]);
        if (!deque_is_empty(queue)) {
            work_found = 1;
            credit_message_t *message = (credit_message_t *) deque_peek_front(queue);
            lf_set(credit_1, *message);
            free(deque_pop_front(queue)); // free allocated memory
        }

        queue = &(self->message_queues[2]);
        if (!deque_is_empty(queue)) {
            work_found = 1;
            credit_message_t *message = (credit_message_t *) deque_peek_front(queue);
            lf_set(credit_2, *message);
            free(deque_pop_front(queue)); // free allocated memory
        }


        if (work_found) {
            int out = 0;
            lf_set(nextOut, out);
        } else {
            //lf_print("Teller: Finished iteration\n");
            int fin = true;
            lf_set(finished, fin);
        }
    =}
}

reactor Account(bank_index:size_t=0, numAccounts:size_t=1000, numTransactions:size_t=50000) {

    state balance: double=0;
    input inCredit: credit_message_t;

    //input[numAccounts] inDebit: double;
    //output[numAccounts] outDebit: double;

    input inDebit0: double;
    output outDebit0: double;
    input inDebit1: double;
    output outDebit1: double;
    input inDebit2: double;
    output outDebit2: double;

    reaction (startup) {=
        self->balance = DBL_MAX / (self->numAccounts * self->numTransactions); // initial balance for each account
    =}

    reaction (inCredit) -> outDebit0, outDebit1, outDebit2 {=
        credit_message_t message = inCredit->value;
        // reduce the balance

        self->balance -= message.amount;
        double amount = message.amount;
        // and sent the recipient a debit message
        switch (message.recipient) {
            case 0: lf_set(outDebit0, amount); break;
            case 1: lf_set(outDebit1, amount); break;
            case 2: lf_set(outDebit2, amount); break;
        }

        //lf_set(outDebit[message.recipient], message.amount);
        //lf_print("Account %zu credits %f to %zu\n", self->bank_index, message.amount, message.recipient);
    =}

    reaction (inDebit0, inDebit1, inDebit2) {=
        if (inDebit0->is_present) {
            double amount = inDebit1->value;
            // increase the balance
            self->balance += amount;
            //lf_print("Account: 0 received %f\n", amount);
        }
        if (inDebit1->is_present) {
            double amount = inDebit1->value;
            // increase the balance
            self->balance += amount;
            //lf_print("Account: 1 received %f\n", amount);
        }
        if (inDebit2->is_present) {
            double amount = inDebit2->value;
            // increase the balance
            self->balance += amount;
            //lf_print("Account: 2 received %f\n", amount);
        }
    =}
}

/* [[[cog
        cog.outl(f'main reactor (numIterations:size_t={numIterations}, numTransactions:size_t={numTransactions}, numAccounts:size_t={numAccounts})')
    ]]] */
    main reactor (numIterations:size_t=12, numTransactions:size_t=5000, numAccounts:size_t=100)
    /// [[[end]]]
{
    teller = new Teller(numAccounts=numAccounts, numBankings=numTransactions);
    teller.nextOut -> teller.nextIn after 1nsec;

    account_0 = new Account(numAccounts=numAccounts, numTransactions=numTransactions);
    account_1 = new Account(numAccounts=numAccounts, numTransactions=numTransactions);
    account_2 = new Account(numAccounts=numAccounts, numTransactions=numTransactions);

    runner = new BenchmarkRunner(num_iterations=numIterations);
    runner.nextIterationOut -> runner.nextIterationIn after 1nsec;
    runner.doneOut -> runner.doneIn after 1nsec;

    reaction(startup) {=
        printBenchmarkInfo("BankingBenchmark");
        printSystemInfo();
    =}

    runner.start -> teller.start;
    
    teller.credit_0 -> account_0.inCredit;
    teller.credit_1 -> account_1.inCredit;
    teller.credit_2 -> account_2.inCredit;
    
    teller.finished -> runner.finish;

    account_0.outDebit0 -> account_0.inDebit0;
    account_0.outDebit1 -> account_1.inDebit0;
    account_0.outDebit2 -> account_2.inDebit0;
    
    account_1.outDebit0 -> account_0.inDebit1;
    account_1.outDebit1 -> account_1.inDebit1;
    account_1.outDebit2 -> account_2.inDebit1;

    account_2.outDebit0 -> account_0.inDebit2;
    account_2.outDebit1 -> account_1.inDebit2;
    account_2.outDebit2 -> account_2.inDebit2;

}
