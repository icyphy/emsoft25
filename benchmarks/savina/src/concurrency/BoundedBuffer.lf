/**
 * Copyright (C) 2020 TU Dresden and UC Berkeley
 *
 * This benchmark models a bounded buffer that is used to synchronize between a
 * group of consumers and a group of producers. In the Akka implementation of
 * this benchmark, all producers, consumers and the manager operate fully
 * asynchronously. However, in the LF implementation everything is synchronous.
 * Thus, strictly speaking, the buffer isn't actually needed as we can design
 * the program so that every tick a producer produces data and a consumer
 * consumes it. But, the number of consumers and producers can be selected
 * arbitrarily. Therefore, we still need some logic that takes care of
 * orchestrating the producers according to the rate at which the consumers
 * consume. Also, we could think about using an alternative design, where the
 * consumers don't become available again immediately after consuming (at a
 * later tag). Therefore, this benchmark still implements most of
 * synchronization logic of the original manager in the Akka version.
 *
 * @author Christian Menard
 * @author Hannes Klein
 * @author Matt Chorlian
 */

 target C {
    /* [[[cog
      if (threading=="True"):
          cog.outl("single-threaded: false,")
          cog.outl(f"workers: {workers},")
          cog.outl(f"scheduler: {scheduler},")
      else:
          cog.outl("single-threaded: true,")
    ]]] */
    //single-threaded: true,
    /// [[[end]]]
    files: ["/lib/c/reactor-c/util/deque.h",
            "/lib/c/reactor-c/util/deque.c",
            "../include/benchmark_runner.h",
            "../include/PseudoRandom.h"],
    cmake-include: ["../include/deque.cmake"], 
    //logging: "warn",
    //fast: true
    //scheduler: STATIC,
    timeout: 12000100 nsec
};

import BenchmarkRunner from "../BenchmarkRunner.lf";
import BroadcastBool from "../Broadcast.lf";


preamble {=
    #include "PseudoRandom.h"
    #include <math.h>
    #include "deque.h"
    #include "benchmark_runner.h"
    double processItem(double curTerm, size_t cost);
=}


reactor ManagerReactor(bufferSize: size_t=50, numProducers: size_t=2, numConsumers: size_t=2) {

    preamble {=
        double processItem(double curTerm, size_t cost) {
            double res = curTerm;

            PseudoRandom random;
            random.mValue = cost;

            if(cost > 0) {
                for(size_t i = 0; i < cost; i++) {
                    for(size_t j = 0; j < 100; j++) {
                        res += log(fabs(nextDouble(&random)) + 0.01);
                    }
                }
            } else {
                res += log(fabs(nextDouble(&random)) + 0.01);
            }

            return res;
        }
    =}

    input start: bool;
    output finished: bool;

    state adjustedBuffersize: size_t=0;
    state pendingData: deque_t;
    state numTerminatedProducers: size_t=0;
    state producerTerminated: {=bool[]=};
    state producer_id: size_t=0;

    input producerData0: double;
    input producerData1: double;

    input producerFinished0: bool;
    input producerFinished1: bool;

    output producerCommand0: bool;
    output producerCommand1: bool;

    input consumerAvailable0: bool;
    input consumerAvailable1: bool;

    output consumerData0: double;
    output consumerData1: double;

    //input[numProducers] producerData: double;
    //input[numProducers] producerFinished: bool;
    //output[numProducers] producerCommand: bool;

    //input[numConsumers] consumerAvailable: bool;
    //output[numConsumers] consumerData: double;

    reaction(start) -> producerCommand0, producerCommand1 {=
        // reset local state
        self->adjustedBuffersize = self->bufferSize - self->numProducers;
        self->numTerminatedProducers = 0;
        self->producerTerminated = malloc(self->numProducers * sizeof(bool));
        for (int i = 0; i < self->numProducers; i++) {
            self->producerTerminated[i] = false;
        }
        self->producer_id = 0;

        // start execution by signalling all producers that they should send data
        lf_set(producerCommand0, true);
        lf_set(producerCommand1, true);
    =}

    // TODO maybe split this reaction into multiple
    reaction(consumerAvailable0, consumerAvailable1) 
        -> consumerData0, consumerData1, producerCommand0, producerCommand1, finished {=
        // abort if all producers have terminated and all data has been send

        //lf_print("con0: %u con1: %u term: %u", consumerAvailable0->is_present, consumerAvailable1->is_present, self->numTerminatedProducers);
        if((self->numTerminatedProducers == self->numProducers) && deque_is_empty(&self->pendingData)) {
            lf_set(finished, true);
            return;
        }

        if (!deque_is_empty(&self->pendingData)) {
            if (consumerAvailable0->is_present) {
                lf_set(consumerData0, (size_t)deque_peek_front(&self->pendingData));
                deque_pop_front(&self->pendingData);
                // tell a producer to create a new data item for the next round
                if (!self->producerTerminated[self->producer_id]) {
                    int val = true;
                    switch (self->producer_id) {
                        case 0: lf_set(producerCommand0, val); break;
                        case 1: lf_set(producerCommand1, val); break;
                    }
                        
                    self->producer_id = (self->producer_id + 1) % self->numProducers;
                }
            }
        }

        if (!deque_is_empty(&self->pendingData)) {
            if (consumerAvailable1->is_present) {
                lf_set(consumerData1, (size_t)deque_peek_front(&self->pendingData));
                deque_pop_front(&self->pendingData);
                // tell a producer to create a new data item for the next round
                if (!self->producerTerminated[self->producer_id]) {
                    int val = true;
                    switch (self->producer_id) {
                        case 0: lf_set(producerCommand0, val); break;
                        case 1: lf_set(producerCommand1, val); break;
                    }
                        
                    self->producer_id = (self->producer_id + 1) % self->numProducers;
                }
            }
        }
    =}

    reaction(producerData0) {=
        if (producerData0->is_present) {
            size_t prodData = producerData0->value;
            deque_push_back(&self->pendingData, (void*) prodData);
        }
        
    =}

    reaction(producerData1) {=
        if (producerData1->is_present) {
            size_t prodData = producerData1->value;
            deque_push_back(&self->pendingData, (void*) prodData);
        }
    =}

    reaction(producerFinished0) {=
        if (producerFinished0->is_present) {
            self->numTerminatedProducers++;
            self->producerTerminated[0] = true;
        }
    =}

    reaction(producerFinished1) {=
        if (producerFinished1->is_present) {
            self->numTerminatedProducers++;
            self->producerTerminated[1] = true;
        }
    =}

    reaction(shutdown) {=
        free(self->producerTerminated);
    =}

}

reactor ProducerReactor(bank_index: size_t=0, numItemsToProduce: size_t=1000, prodCost: size_t=25) {

    state prodItem: double=0.0;
    state itemsProduced: size_t=0;

    input produce: bool;
    output data: double

    input reset_state: bool;
    output finished: bool;

    reaction (reset_state) {=
        // reset local state
        self->prodItem = 0.0;
        self->itemsProduced = 0;
        return;
    =}

    reaction(produce) -> data, finished {=
        self->prodItem = processItem(self->prodItem, self->prodCost);
        lf_set(data, self->prodItem);
        self->itemsProduced++;

        if (self->itemsProduced == self->numItemsToProduce) {
            lf_set(finished, true);
        }
    =}
}

reactor ConsumerReactor(bank_index: size_t=0, consCost: size_t=25) {

    state consItem: double = 0.0;

    input reset_state: bool;

    input data: double;
    output available: bool;

    //logical action sendAvailable;
    input sendAvailableIn: int;
    output sendAvailableOut: int;

    reaction (reset_state) -> sendAvailableOut {=
        // reset local state
        self->consItem = 0.0;
        lf_set(sendAvailableOut, 0);
    =}

    reaction(sendAvailableIn) -> available {=
        lf_set(available, true);
    =}

    reaction(data) -> sendAvailableOut {=
        self->consItem = processItem(self->consItem + data->value, self->consCost);
        lf_set(sendAvailableOut, 0);
    =}
}


/* [[[cog
  cog.outl('main reactor (')
  cog.outl(f'    numIterations: size_t={numIterations},')
  cog.outl(f'    bufferSize: size_t={bufferSize},')
  cog.outl(f'    prodCost: size_t={prodCost},')
  cog.outl(f'    consCost: size_t={consCost},')
  cog.outl(f'    numItemsPerProducer: size_t={numItemsPerProducer},')
  cog.outl(f'    numConsumers: size_t={numConsumers},')
  cog.outl(f'    numProducers: size_t={numProducers}')
]]] */
main reactor (
    numIterations: size_t=12,
    bufferSize: size_t=50,
    prodCost: size_t=25,
    consCost: size_t=25,
    numItemsPerProducer: size_t=1000,
    numConsumers: size_t=2,
    numProducers: size_t=2
// [[[end]]]
) {
    runner = new BenchmarkRunner(num_iterations=numIterations);
    runner.nextIterationOut -> runner.nextIterationIn after 1nsec;
    runner.doneOut -> runner.doneIn after 1nsec;

    manager = new ManagerReactor(bufferSize=bufferSize, numProducers=numProducers, numConsumers=numConsumers);

    //(runner.start)+ -> manager.start, producers.reset_state, consumers.reset_state;
    manager.finished -> runner.finish;

    reaction(startup) {=
        printBenchmarkInfo("ProdConsBenchmark");
        printSystemInfo();
    =}

    producer0 = new ProducerReactor(numItemsToProduce=numItemsPerProducer, prodCost=prodCost);
    producer1 = new ProducerReactor(numItemsToProduce=numItemsPerProducer, prodCost=prodCost);
    consumer0 = new ConsumerReactor(consCost=consCost);
    consumer1 = new ConsumerReactor(consCost=consCost);

    broadcast = new BroadcastBool()
    runner.start -> broadcast.in;
    
    broadcast.out0 -> consumer0.reset_state;
    broadcast.out1 -> consumer1.reset_state;
    broadcast.out2 -> producer0.reset_state;
    broadcast.out3 -> producer1.reset_state;
    broadcast.out4 -> manager.start;

    consumer0.sendAvailableOut -> consumer0.sendAvailableIn after 1nsec;
    consumer1.sendAvailableOut -> consumer1.sendAvailableIn after 1nsec;
    manager.producerCommand0 -> producer0.produce;
    manager.producerCommand1 -> producer1.produce;

    producer0.data -> manager.producerData0;
    producer1.data -> manager.producerData1;

    producer0.finished -> manager.producerFinished0;
    producer1.finished -> manager.producerFinished1;

    consumer0.available -> manager.consumerAvailable0;
    consumer1.available -> manager.consumerAvailable1;

    manager.consumerData0 -> consumer0.data;
    manager.consumerData1 -> consumer1.data;
}
