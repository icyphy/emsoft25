/**
 * Copyright (C) 2020 TU Dresden
 *
 * For more details on this benchmark, see the Cpp version from which it was derived:
 * https://github.com/lf-lang/benchmarks-lingua-franca/blob/main/Cpp/Savina/src/concurrency/LogisticMap.lf.
 *
 * @author Christian Menard
 * @author Hannes Klein
 */

target C {
    /* [[[cog
      if (threading=="True"):
          cog.outl("single-threaded: false,")
          cog.outl(f"workers: {workers},")
          cog.outl(f"scheduler: {scheduler},")
      else:
          cog.outl("single-threaded: true,")
    ]]] */
    single-threaded: true,
    /// [[[end]]]
    //fast: true
    scheduler: STATIC,
    timeout: 12000100 nsec
}

import BenchmarkRunner from "../BenchmarkRunner.lf";
import BroadcastBool, BroadcastInt from "../Broadcast.lf";

reactor RateComputer(bank_index: size_t=0, startRate: double=3.46, rateIncrement: double=0.0025) {

    state rate: double;

    input compute: double;
    output result: double;

    reaction(startup) {=
        self->rate = self->startRate + (self->bank_index * self->rateIncrement);
    =}

    reaction(compute) -> result {=
        double term = compute->value;
        double res = self->rate * term * (1 - term);
        lf_set(result, res);
    =}
}

reactor SeriesWorker(bank_index: size_t=0, termIncrement: double=0.0025, startRate: double=3.46, rateIncrement: double=0.0025) {

    state curTerm: double;

    input reset_state:bool;
    input nextTerm: int;
    input getTerm: int;
    output term: double;

    output compute: double;
    input result: double;



    reaction(nextTerm) -> compute {=
        lf_set(compute, self->curTerm);
    =}

    reaction(getTerm) -> term {=
        lf_set(term, self->curTerm);
    =}

    reaction(result) {=
        self->curTerm = result->value;
    =}

    reaction (reset_state) {=
        // initialize local state
        self->curTerm = self->bank_index * self->termIncrement;
    =}
}


reactor Manager(numSeries: size_t=10, numTerms: size_t=25000) {
    state currentIteration: size_t=0;

    input start: bool;
    output finished: bool;

    output nextTerm: int;
    output getTerm: int;
    
    //input[numSeries] results: double;
    input result0: double;
    input result1: double;

    input nextIn: int;
    output nextOut: int;

    reaction(startup) -> nextOut {=
        lf_set(nextOut, 0);
    =}

    reaction(start, nextIn) -> getTerm, nextTerm, nextOut {=
        if(self->currentIteration == self->numTerms) {
            lf_set(getTerm, 0);
            return;
        }

        lf_set(nextTerm, 0);
        self->currentIteration++;
        lf_set(nextOut, 0);
    =}

    reaction(result0, result1) -> finished {=
        double terms_sum = 0.0;

        terms_sum += result0->value;
        terms_sum += result1->value;

        printf("Terms sum: %f\n", terms_sum);
        lf_set(finished, true);
        self->currentIteration = 0;
    =}
}

/* [[[cog
  cog.outl(f"main reactor (numIterations: size_t={numIterations}, numTerms: size_t={numTerms}, startRate: double={startRate}, numSeries: size_t={numSeries}) {{")
]]] */
main reactor (numIterations: size_t=12, numTerms: size_t=25000, startRate: double=3.46, numSeries: size_t=10) {
/// [[[end]]]

    manager = new Manager(numSeries=numSeries, numTerms=numTerms);
    manager.nextOut -> manager.nextIn after 1nsec;

    runner = new BenchmarkRunner(num_iterations=numIterations)
    runner.nextIterationOut -> runner.nextIterationIn after 1nsec;
    runner.doneOut -> runner.doneIn after 1nsec;

    worker0 = new SeriesWorker(startRate=startRate, rateIncrement=0.0025, termIncrement=0.0025);
    computer0 = new RateComputer(bank_index=0, startRate=startRate, rateIncrement=0.0025);

    worker0.compute -> computer0.compute;
    computer0.result -> worker0.result;

    worker1 = new SeriesWorker(startRate=startRate, rateIncrement=0.0025, termIncrement=0.0025);
    computer1 = new RateComputer(bank_index=1, startRate=startRate, rateIncrement=0.0025);

    worker1.compute -> computer1.compute;
    computer1.result -> worker1.result;

    //(runner.start)+ -> manager.start, seriesWorkers.reset_state;
    broadcast = new BroadcastBool();
    runner.start -> broadcast.in;

    broadcast.out0 -> manager.start;
    broadcast.out1 -> worker0.reset_state;
    broadcast.out2 -> worker1.reset_state;

    manager.finished -> runner.finish;


    broadcast_next_term = new BroadcastInt();
    //(manager.nextTerm)+ -> seriesWorkers.nextTerm;
    manager.nextTerm -> broadcast_next_term.in;
    broadcast_next_term.out0 -> worker0.nextTerm;
    broadcast_next_term.out1 -> worker1.nextTerm;

    broadcast_get_term = new BroadcastInt();
    //(manager.getTerm)+ -> seriesWorkers.getTerm;
    manager.getTerm -> broadcast_get_term.in;
    broadcast_get_term.out0 -> worker0.getTerm;
    broadcast_get_term.out1 -> worker1.getTerm;

    //manager.getTerm -> worker0.getTerm after 1nsec;
    //manager.getTerm -> worker1.getTerm after 1nsec;

    worker0.term -> manager.result0;
    worker1.term -> manager.result1;
}
