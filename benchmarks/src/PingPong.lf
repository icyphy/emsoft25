/**
 * Basic benchmark from the Savina benchmark suite that is
 * intended to measure message-passing overhead.
 * See [Benchmarks wiki page](https://github.com/icyphy/lingua-franca/wiki/Benchmarks).
 * This is based on https://www.scala-lang.org/old/node/54
 * See https://shamsimam.github.io/papers/2014-agere-savina.pdf.
 *
 * Ping introduces a microstep delay using a logical action
 * to break the causality loop.
 *
 * To get a sense, some (informal) results for 1,000,000 ping-pongs
 * on my Mac:
 *
 * Unthreaded: 97 msec
 * Threaded: 265 msec
 *
 * There is no parallelism in this application, so it does not benefit from being
 * being threaded, just some additional overhead.
 *
 * These measurements are total execution time, including startup and shutdown.
 * These are about an order of magnitude faster than anything reported in the paper.
 */
 target C {
    /* [[[cog
      if (threading=="True"):
          cog.outl("single-threaded: false,")
          cog.outl(f"workers: {workers},")
          cog.outl(f"scheduler: {scheduler},")
      else:
          cog.outl("single-threaded: true,")
    ]]] */
    //single-threaded: true,
    /// [[[end]]]
    files: ["../../savina/src/include/benchmark_runner.h"],
    timeout: 13000 msec, // FIXME: 12001000000 nsec yields an error
    workers: 1,
};

import BenchmarkRunner from "../../savina/src/BenchmarkRunner.lf";

preamble {=
    #include "benchmark_runner.h"
=}

realtime reactor Ping(count:size_t=1000000) {
    input receive:size_t;
    input start:bool;
    output send:size_t;
    output finished:bool;
    output finished2:bool;
    state pingsLeft:size_t=count;

    // Wrapper with After Delay
    input serve_in: int;
    output serve_out: int;

    @wcet("10000 nsec")
    reaction (start, serve_in)  -> send {= //TODO: serve_in
        // printf("pings left %i\n", self->pingsLeft);
        self->pingsLeft--;
        lf_set(send, self->pingsLeft);
    =}
    @wcet("5000 nsec")
    reaction (receive) -> finished, finished2, serve_out {= // serve_out
        // printf("pings left %i", self->pingsLeft);
        if (self->pingsLeft > 0) {
            lf_set_present(serve_out);
        } else {
            // reset pingsLeft for next iteration
            self->pingsLeft = self->count;
            lf_set_present(finished);
            lf_set_present(finished2);
        }
    =}
}
realtime reactor Pong(expected:size_t=1000000) {
    input receive:size_t;
    output send:size_t;
    input finish: bool;
    state count:size_t=0;
    @wcet("7000 nsec")
    reaction(receive) -> send {=
        self->count++;
        // lf_print("Received %d", receive->value);
        lf_set(send, receive->value);
    =}
    @wcet("7000 nsec")
    reaction(finish) {=
        if (self->count != self->expected) {
            lf_print_error_and_exit("Pong expected to receive %d inputs, but it received %d.\n",
                self->expected, self->count
            );
            exit(1);
        }
        printf("Success.\n");
        self->count = 0;
    =}
}

/*[[[cog
cog.outl(f'main reactor PingPong(numIterations:size_t={numIterations}, count:size_t={count})')
]]] */
main reactor PingPong(numIterations:size_t=12, count:size_t=1000)
/// [[[end]]]
{
    runner = new BenchmarkRunner(num_iterations=numIterations);
    runner.doneOut -> runner.doneIn;
    // To minimize hyperperiod, the after delay needs to be the same as 
    // the after delay along ping.serve_out -> ping.serve_in
    runner.nextIterationOut -> runner.nextIterationIn after 1 msec;
    
    pong = new Pong(expected=count);
    ping = new Ping(count=count);
    ping.serve_out -> ping.serve_in after 1 msec;

    runner.start -> ping.start after 1 msec;
    ping.finished -> pong.finish;
    ping.finished2 -> runner.finish;
    ping.send -> pong.receive;
    pong.send -> ping.receive;
}