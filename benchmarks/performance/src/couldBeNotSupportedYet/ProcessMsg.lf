target C {
  scheduler: {
    type: STATIC,
    static-scheduler: LB
  },
  workers: 8,
  timeout: 5 usec,
  cmake-include: ["pigpio.txt"]
}

preamble {=
  #include <pigpio.h>

  // Logic analyser channels <=> RPi GPIO pins
  #define LOGIC_ANALYZER_CHANNEL_r1_8 26
  #define LOGIC_ANALYZER_CHANNEL_r2_6 19
  #define LOGIC_ANALYZER_CHANNEL_r3_4 13
  #define LOGIC_ANALYZER_CHANNEL_r10_2 6
  #define LOGIC_ANALYZER_CHANNEL_r20_1 5
  #define LOGIC_ANALYZER_CHANNEL_r30_3 0
=}

reactor Task {
  input in: int
  output out: int

  state messageSent: int
  state counter: int = 0
  state panic: int = 0

  timer t(0, 1 nsec)

  logical action updateMessage

  reaction(startup) {=
    self->messageSent = 0;
  =}

  reaction(t) -> out {=
    lf_set(out, self->messageSent);
  =}

  reaction(in) -> updateMessage {=
    /* Check for invalid message.  */
    if (in->value != self->messageSent) {
        self->panic = 1;
    }
    lf_schedule(updateMessage, 0);
    self->counter += 1;
  =}

  reaction(updateMessage) {=
    /* Increment the last word of the 16-byte message.  */
    self->messageSent += 1;
  =}
}

// @property(name="panic_free", tactic="bmc", spec="G[5 nsec](ProcessMsg_task_panic != 1)", expect=true)
main reactor {
  task = new Task()
  task.out -> task.in

  reaction(startup) {=
    // Initialize PIGPIO library
    if (gpioInitialise() < 0) {
      lf_print(stderr, "Failed to initialize GPIO.");
      return 1;
    }
    // Set pins modes
    gpioSetMode(LOGIC_ANALYZER_CHANNEL_r1_8, PI_OUTPUT);
    gpioSetMode(LOGIC_ANALYZER_CHANNEL_r2_6, PI_OUTPUT);
    gpioSetMode(LOGIC_ANALYZER_CHANNEL_r3_4, PI_OUTPUT);
    gpioSetMode(LOGIC_ANALYZER_CHANNEL_r10_2, PI_OUTPUT);
    gpioSetMode(LOGIC_ANALYZER_CHANNEL_r20_1, PI_OUTPUT);
    gpioSetMode(LOGIC_ANALYZER_CHANNEL_r30_3, PI_OUTPUT);
  =}

  reaction(shutdown) {=
    gpioTerminate(); // Clean up GPIO
    lf_print("Done.");
  =}
}
