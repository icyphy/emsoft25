/*
 * Copyright (C) 2020 TU Dresden
 *
 * This benchmark "solves" the Cigarette Smoker Problem similarly to the
 * original Savina implementation in Akka. However, it is important to note
 * first, that the Savina implementation does not actually model the resources
 * (paper, matches, tobacco) and thus does not provide a complete solution. It
 * only uses a pattern similar to a common solution of the Cigaratte Smokers
 * Problem. This solution uses an arbitrator that tells the smokers when they
 * can grab the resources and make a cigarette. Since no resources are modelled
 * in Savina, the arbitrator actually just randomly selects a smoker and tells
 * it to smoke.
 *
 * The process of smoking is implemented in the Savina suite by calling Java
 * `Math.random()` a few times in a loop. Converting this "workload" to another
 * language is non-trivial, as likely no similar function with the precise same
 * implementation exists. For the C++ port here, we use `rand()` from stdlib.
 * This is a significant restriction of this benchmark and limits the
 * comparability of results obtained from Akka and from LF C++.
 *
 * In the Cigarette Smokers problem, the arbitrator needs to ensure that only
 * one smoker can access the table (and its resources) at once. However, once
 * the smoker made her cigarette and returned the resources, it can "smoke" in
 * parallel to the other smokers. This parallel execution of smoke operations is
 * also implemented in the Savina suite. Due to the asynchronous execution of
 * actors, multiple actors can smoke while only a single actor can make a
 * cigarette.
 *
 * Achieving the parallel execution of smoke operations in LF, however, is
 * non-trivial. In order to send the resources to the next smoker, the
 * arbitrator needs to advance logical time by scheduling an action. But, due to
 * barrier synchronization in the LF runtime, all reactions need to be processed
 * before advancing logical time. This means, the smoker needs to finish its
 * smoke reaction before we can advance to the next tag and send the resources
 * to the next smoker.
 *
 * In an alternative solution (this was actually implemented earlier by Hannes),
 * each smoker could have an additional thread and use this thread to process
 * the workload asynchronously. This requires an explicit synchronization
 * mechanisms and getting the interaction between arbitrator, smoker and worker
 * thread right appears to be hard. However, the workload in this particular
 * benchmark is processed very rapidly (it produces at most 1000 random
 * numbers). Thus, the synchronisation overhead required when using an
 * additional worker thread outweighs the benefit of parallel execution. The
 * synchronous implementation where only one smoker smokes at a time proved to
 * be significantly faster.
 *
 * Still, finding a simple and efficient solution that processes the smoker
 * workload in parallel would be an interesting problem. If the process of
 * making the cigarette is much faster than the smoking, one option would be to
 * serialize the cigarette making and let the smokers wait before starting to
 * smoke. This way, we can wait until all smokers have a cigarette and then let
 * them start smoking all at once in parallel. This could be achieved with
 * logical actions in each smoker by scheduling each action at a specific known
 * tag.
 *
 * @author Christian Menard
 * @author Hannes Klein
 * @author Matt Chorlian
 */

target C {
    /* [[[cog
      if (threading=="True"):
          cog.outl("single-threaded: false,")
          cog.outl(f"workers: {workers},")
          cog.outl(f"scheduler: {scheduler},")
      else:
          cog.outl("single-threaded: true,")
    ]]] */
    //single-threaded: true,
    /// [[[end]]]
    files: ["../../savina/src/include/PseudoRandom.h", "../../savina/src/include/benchmark_runner.h"],
    //fast: true,
    scheduler: STATIC,
    timeout: 12000100 nsec
};

import BenchmarkRunner from "../../savina/src/BenchmarkRunner.lf";

preamble {=
    #include "PseudoRandom.h"
=}

reactor ArbiterReactor(numRounds:size_t=1000, numSmokers:size_t=200) {

    state roundsSoFar: size_t=0;
    state random: PseudoRandom*;

    input inStart:bool;
    output outFinished:bool;

    //output[numSmokers] startSmoking: size_t;
    output startSmoking0: size_t;
    output startSmoking1: size_t;

    //logical action chooseSmoker;
    //logical action stop;

    input stopIn: int;
    output stopOut: int;

    input chooseSmokerIn: int;
    output chooseSmokerOut: int;

    reaction(inStart) -> chooseSmokerOut {=
        // Initialize the random state variable
        self->random = (PseudoRandom*)malloc(sizeof(PseudoRandom));
        self->random->mValue = self->numRounds * self->numSmokers;
        // reset local state
        self->roundsSoFar = 0;

        // start excution
        lf_set(chooseSmokerOut, 0);
    =}

    reaction(chooseSmokerIn) -> startSmoking0, startSmoking1, chooseSmokerOut, stopOut {=
        // assume resources grabbed instantaneously and choose a random smoker to start smoking
        int newSmokerIndex = labs(nextInt(self->random)) % self->numSmokers;

        int busyWaitPeriod = nextIntEMax(self->random, 1000) + 10;

        switch (newSmokerIndex) {
            case 0: lf_set(startSmoking0, busyWaitPeriod); break;
            case 1: lf_set(startSmoking1, busyWaitPeriod); break;
        }

        // no need to wait for feedback from the smoker, as it starts smoking (logically) instantaneously
        // We can immediately schedule the next round

        self->roundsSoFar++;
        if (self->roundsSoFar >= self->numRounds) {
            lf_set(stopOut, 0);
        } else {
            // trigger the next round
            lf_set(chooseSmokerOut, 0);
        }
    =}

    reaction(stopIn) -> outFinished {=
        lf_set(outFinished, true);
    =}

    reaction(shutdown) {=
        free(self->random);
    =}
}

reactor SmokerReactor {

    preamble {=
        size_t busyWait(size_t limit) {
            size_t test = 0;
            for(size_t k = 0; k < limit; k++) {
                // Math.random() is used as workload in the original savina benchmark suite
                // FIXME: What is equivalent in Cpp complexity-wise? maybe rand()??
                rand();
                test++;
            }
            return test;
        }
    =}

    input startSmoking: size_t;

    reaction(startSmoking){=
        size_t limit = startSmoking->value;
        busyWait(limit);
    =}

}


/* [[[cog
    cog.outl(f'main reactor (numIterations:size_t={numIterations}, numRounds:size_t={numRounds}, numSmokers:size_t={numSmokers})')
]]] */
main reactor (numIterations:size_t=12, numRounds:size_t=1000, numSmokers:size_t=200)
/// [[[end]]]

{
    arbiter = new ArbiterReactor(numRounds=numRounds, numSmokers=numSmokers);
    arbiter.stopOut -> arbiter.stopIn after 1nsec;
    arbiter.chooseSmokerOut -> arbiter.chooseSmokerIn after 1nsec;


    runner = new BenchmarkRunner(num_iterations=numIterations);
    runner.nextIterationOut -> runner.nextIterationIn after 1nsec;
    runner.doneOut -> runner.doneIn after 1nsec;

    runner.start -> arbiter.inStart;
    arbiter.outFinished -> runner.finish;

    smoker0 = new SmokerReactor();
    smoker1 = new SmokerReactor();

    arbiter.startSmoking0 -> smoker0.startSmoking;
    arbiter.startSmoking1 -> smoker1.startSmoking;
}
